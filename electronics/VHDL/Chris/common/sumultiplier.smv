MODULE main

VAR
	InA : word[3];
	InB : word[3];
VAR
	Prod : word[6];
	OldA : word[3];
	OldB : word[3];
	Shift : word[6];
	Key : word[3];

ASSIGN
	init(Prod) := 0d3_0 :: 0d3_0;
	init(OldA) := 0d3_0;
	init(OldB) := 0d3_0;
	init(Shift) := 0d3_0 :: 0d3_0;
	init(Key) := 0d3_0;

	next(Prod) :=
		case
			((InA != OldA) | (InB != OldB)) :
				0d3_0 :: 0d3_0;
			bool(Key[0:0]) :
				Prod + Shift;
			1 :
				Prod;
		esac;

	next(OldA) := InA;
	next(OldB) := InB;

	next(Shift) :=
		case
			((InA != OldA) | (InB != OldB)) :
				0d3_0 :: InA;
			1:
				Shift << 1;
		esac;

	next(Key) :=
		case
			((InA != OldA) | (InB != OldB)) :
				InB;
			1:
				Key >> 1;
		esac;



LTLSPEC (F G (InA = OldA & InB = OldB)) -> (F G (Prod = (0d3_0 :: InA) * (0d3_0 :: InB)));
